/* First let's reset some styles. */
* { margin: 0; padding: 0; }

/*
 * THE LAYOUT
 * ==========
 * The big picture is presented here. The blog is split into two sections: 
 * a main big left side and a thin sidebar on the right.
 */

/* 100% height for body and html tags means the height of the viewport. */
html, body { height: 100%; } 

/* The main wrapper fill almost all the background leaving some space on the
right for the aside column. */
#wrapper {

  /* Making the wrapper mininum heigh to be 100% forces the wrapper to fill
  all the viewport space pushing the footer to the bottom. */
  min-height: 100%;
  position: relative;

  /* Use calc() to perform arithmetic operations with mixed units. */
  width: calc(100% - 20rem);
  min-height: 100%;
}

#wrapper > header h1 {
  /* rem is a very handful CSS3 unit named after root em, i.e. relative to the
  font-size of the html (the root) element. This way all is relative to a user
  defined size. See TEXT & COLOR section. */
  padding: 1rem;
}

#wrapper > header h2 {
  padding: 1rem;
}

#wrapper > div > section {
  padding: 2rem;
}

/* The aside column fills the right space. */
body > aside {
  float: right;
  
  /* With this box model, setting the width to 20rem includes all the space
  to the border itself. */
  box-sizing: border-box;
  width: 20rem;
  padding: 1rem;
}

/* The footer. */
footer {
  padding: 1rem;
  width: calc(100% - 20rem - 2rem); /* Taking into account aside column and
                                       padding. */
}

/*
 * SECTIONS
 * ========
 * Now focus on each former section and setup its content. Create as many 
 * sub-layouts as needed.
 */

#post-list li {
  width: calc(100% - 1rem);
  padding: 0.2rem 0.5rem;
  margin-bottom: 0.5rem;

  list-style: none;
}

#post-list li menu {
  float: right;
}

#show-post p {
  margin-bottom: 1rem;
}

#show-post menu {
  text-align: right;
}

#show-post .post-picture {
  float: right;
  width: 50%; /* Making this relative to the content container provides a
              very responsive choice for images. */

  padding: 1rem;
  margin-left: -3rem; /* A negative margin forces the content to invade the box
                      of the element. It is here to compensate the X-translation
                      used to make the picture to overflow the content section.
                      */
  padding-bottom: 3rem;

  /* Box shadows are verbose properties which allow to specify a list of
  shadows. Parameters are: offset-x offset-y blur spread and color. They can
  be prefixed by inset to create an inner shadow. */
  box-shadow: 0.5rem 0.5rem 0.5rem 0 rgba(0, 0, 0, 0.4);

  /* Transformations are one of the most interesting CSS3 new features. 
  Transformations happen after calculating the structure of the page and have
  a very high performance. Transformations can be combined writing them as
  a space-separated list.*/
  transform: rotate(2deg) translateX(5rem);
}

#show-post .post-picture img {
  width: 100%; /* Only specifying one of the dimensions makes the other auto
               and keeps the aspect ration. */
}

#add-comment {
  margin-top: 4rem;
  padding: 1rem;
  border: 4px solid;
  position: relative;
  
  /* Border radius allow to make rounded corner for boxes. */
  border-radius: 1rem;
  box-shadow: 0 1rem 1.5rem 0.2rem rgba(0, 0, 0, 0.4);
}

#add-comment p.commenter,
/* The brother (~) selector matches the next element at the same DOM level. */
#add-comment p.commenter ~ p {
  text-align: right;
}

#add-comment textarea {
  height: 10rem;
  box-shadow: inset 0 -1px 1px 0;
}

#add-comment input[type=text] {
  width: 50%;
}

form {
  width: 100%;
}

form p {
  margin-bottom: 2rem;
}

form textarea,
/* The fancy attribute selector allows to test for attributes in several way.
This one is testing for the existence of attribute type set to value "text". */
form input[type="text"] {
  box-sizing: border-box;
  width: 100%;
  border-radius: 0.7rem;
  padding: 0.5rem;  
  border: none;
  outline: none;
}

#new-post form textarea,
#edit-post form textarea {
  height: 31em;
}

aside .comment {
  position: relative;
  z-index: 20; /* The z-index only works for non static position values. */
  padding: 1rem;
  margin-bottom: 1rem;
  border-radius: 1rem;
}

/* The pseudoelement :focus is triggered when an element obtains the focus.
Very limited HTML elements can be focused at first but you can force any element
to become focusable by setting its tabindex attribute to a numeric value. */
aside .comment:focus {
  /* Outline is a special class of border. Normally used by browsers to
  highlight an element in a special state such as active or focused.*/
  outline: none;
}

.comment menu {
  text-align: right;
}

footer {
  overflow: auto;
}

footer > p {
  float: left;
  width: 45%;
}

footer > p ~ p {
  float: right;
}

footer p img {
  height: 10rem;
  max-height: 20%;
  float: left;
  margin-right: 1rem;
}

/*
 * DECORATIVE & FX
 * ===============
 *
 * Put here all your pure decoraative elements and special effects.
 */

/* How to make a triangle? 
 *  1- Use pseudoelements to not polute HTML.
 *  2- Remember to give some value (the empty string this case) to content
 *  3- Use a 0x0 box with border. The borders become 4 triangles.
 *  4- Remove unwanted triangles by setting them to transparent color.
 */
#add-comment::after,
#add-comment::before {
  content:"";

  position: absolute;
  top: -2rem; left: 50%;
  width: 0; height: 0;

  border: 1rem solid transparent;
}

#add-comment::after {
  top: -1.7rem;  
}

a.icon {
  /* All these properties force the shape to be a square. */
  display: inline-block;
  width: 1rem;
  height: 1rem;
  padding: 0.1rem;
  margin: 0.1rem;

  text-align: center;
  text-decoration: none;
  line-height: 1rem;
  
  border: 1px solid;
}

.pagination a,
.pagination .current,
.button {
  display: inline-block;
  padding: 0.2rem 0.4rem;
  margin-bottom: 0.5rem;

  border: solid 1px;
  border-radius: 0.2rem;

  text-shadow: 0 1px black;
  text-decoration: none;
}

.pagination .disabled {
  display: none;
}

aside .comment {
  position: relative;
  z-index: 20;
  padding: 1rem;
  margin-bottom: 1rem;
  border-radius: 1rem;

  /* The transform-origin property allows to set the center of a transformation.
  As we want the comments hang from the top-right corner, we set the center in
  that position. */
  transform-origin: 100% 0%;
  transform: rotate(-5deg);
  transition: transform 400ms ease;
  
  /* Making the cursor became a pointer when hover we are calling for an action
  on these elements.*/
  cursor: pointer;
}

/* Aside comments have the tabindex property so they can be focused. When
focused, remove rotation and zoom a little bit into. Tweak z-index to keep
the focused one over its peers. The focus trick is very convenient for simple
click events without relying on JavaScript. */
aside .comment:focus {
  transform: scale(1.5) rotate(0);
  outline: none;
  z-index: 21; /* As the natural z ordering puts later lower elements in the
                HTML above the higher ones, raise the z-index to avoid the 
                focused comment to be clipped by the lower ones. */
}

/*
 * TEXT & COLOR
 * ============
 * I like to leave this section at the end concerning the customizable colors
 * for the different elements in order to make them easily changed.
 */

html {
  font-family: 'Source Sans Pro', sans-serif;

  background: url(bg.jpg) fixed;
  background-size: cover; /* Makes the bg to fill the available space. */
}

#wrapper {
  /* Use rgba() or hsla() to set the transparent channel for a color. */
  background-color: rgba(255, 255, 255, 0.8);
}

#wrapper > header {
  text-align: right;
}

#wrapper > header h1 {
  font-size: 3rem;
  text-shadow: 1px 1px 2px black;
  
  background-color: #c52f24;
}

#wrapper > header h1 a {
  color: white;
  text-decoration: none;
}

#wrapper > header h2 {
  background-color: #d5e9f6;
}

#post-list li {
  background-color: #ddd;
}

#post-list li .title a {
  color: #222;
  font-style: italic;
  text-decoration: none;
  font-size: 1.1rem;
  font-weight: 800;
}

#post-list li .title a:hover {
  text-decoration: underline;
}

#show-post {
  text-align: justify;
}

#show-post .post-picture {
  background-color: white;
}

#add-comment {
  color: #eee;
  
  background-color: #333;
  border-color: white;
}

form textarea,
form input[type=text] {

  /* Reset the font family since text areas has monospace as default font. */
  font-family: 'Source Sans Pro', sans-serif;
  font-size: 1rem;
  color: #333;

  background: #f7f7f7;
  box-shadow-color: #333;
}

form input {
  font-size: 1rem;
  padding: 0.2rem;
}

form p label {
  font-size: x-large;
  font-weight: bold;
}

/* See FX to check how to make the bubble. */

/* This controls the triangle's border. */
#add-comment::before {
  border-bottom-color: white;
}

/* And this the triangle's background. */
#add-comment::after {
  border-bottom-color: #333;
}

a.icon {
  color: #333;
  background-color: #ccc;
  border-color: #333;
}

a.icon:hover {
  color: white;
  background-color: #333;
}

/* Despite the rounded square shape, all the magic about the button style is
in the colors. Specially in the gradient background. */
.pagination a,
.pagination .current,
.button {
  border-color: #999;
  /*
  A gradient is specified by a direction and color stops. A color stop
  is a pair of color and position. The color stop points where the color
  turns to the one specified completely. Until this point, the color of 
  the previous stop was interpolated.
  */
  background:
    linear-gradient(to bottom, #808080, #666 40%, #666 60%, #808080);
  color: #eee;
  text-shadow: 0 1px black;
}

.pagination a:hover,
.pagination .current,
.button:hover {
  background: #333;
  color: #eee;
}

aside .comment {
  color: white;
  background-color: rgba(21, 21, 21, 0.8);
}

aside .comment:hover,
aside .comment:focus {
  background-color: black;
}

footer {
  color: white;
  background-color: black;
}

/*
 * RESPONSIVENESS
 * ==============
 * Here there are some rewrites to ensure the responsiveness of the design.
 * As we worked in rem units, all the hard work is almost done. Anyway, some
 * layout tweaks are still required in order to ensure the proper display of
 * all elements.
 */

/* To avoid the reader become blind due to high resolutions and small fonts. */
@media (min-width: 1200px) {
  html { font-size: 150%; } /* This is equivalent to perform a 150% zoom. */
}

@media (min-width: 1000px) and (max-width: 1200px) {
  html { font-size: 125%; } /* This is equivalent to perform a 125% zoom. */
}

/* When falling below 800px, we perform accumulative dramatic changes in the
layout by shrinking the aside space. */
@media (max-width: 800px) {
  html { font-size: 90%; }
  #wrapper { width: calc(100% - 10rem); }
  footer { width: calc(100% - 10rem - 2rem); }
  body > aside { width: 10rem; }
  #show-post .post-picture {
    float: none;
    margin: 0 auto 2rem auto;
    transform: none;
  }
}

/* Once falling below 600px, we rip of comments in order to focus on content. */
@media (max-width: 600px) {
  html { font-size: 60%; }
  #wrapper { width: 100%; }
  footer { width: calc(100% - 2rem); }
  body > aside { display: none; }
  #add-comment { display: none; }
}
